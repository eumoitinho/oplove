"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Camera, Video, Mic, BarChart2, Globe, Users, Lock, ChevronDown, Crown, Gem, X, Plus, MapPin } from "lucide-react"
import { UserAvatar } from "@/components/common/UserAvatar"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { useAuth } from "@/hooks/useAuth"
import { usePremiumFeatures } from "@/hooks/usePremiumFeatures"
import { PaymentModal } from "@/components/common/PaymentModal"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { AudioRecorder } from "@/components/ui/AudioRecorder"
import { MediaUploader } from "./MediaUploader"
import { cn } from "@/lib/utils"

interface CreatePostProps {
  onSuccess?: (post: any) => void
  isMobile?: boolean
}

type Visibility = "public" | "friends" | "private"

interface PollOption {
  id: string
  text: string
}

interface Poll {
  question: string
  options: PollOption[]
  expires_in_hours: number
}

export function CreatePost({ onSuccess, isMobile = false }: CreatePostProps) {
  const { user } = useAuth()
  const features = usePremiumFeatures()
  const [postContent, setPostContent] = useState("")
  const [postVisibility, setPostVisibility] = useState<Visibility>("public")
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showPaymentModal, setShowPaymentModal] = useState(false)
  const [selectedPlan, setSelectedPlan] = useState<"gold" | "diamond" | "couple">("gold")
  const [showAudioRecorder, setShowAudioRecorder] = useState(false)
  const [showMediaUploader, setShowMediaUploader] = useState(false)
  const [mediaFiles, setMediaFiles] = useState<File[]>([])
  const [audioFile, setAudioFile] = useState<File | null>(null)
  const [audioDuration, setAudioDuration] = useState(0)
  const [showPollCreator, setShowPollCreator] = useState(false)
  const [poll, setPoll] = useState<Poll | null>(null)
  const [pollQuestion, setPollQuestion] = useState("")
  const [pollOptions, setPollOptions] = useState<PollOption[]>([
    { id: "1", text: "" },
    { id: "2", text: "" }
  ])
  const [pollDuration, setPollDuration] = useState(24)
  const [location, setLocation] = useState<string>("")
  const [showLocationInput, setShowLocationInput] = useState(false)
  const [showMobileModal, setShowMobileModal] = useState(false)

  const handlePremiumFeatureClick = (requiredPlan: "gold" | "diamond" | "couple" = "gold") => {
    setSelectedPlan(requiredPlan)
    setShowPaymentModal(true)
  }

  const handleAudioReady = (file: File, duration: number) => {
    setAudioFile(file)
    setAudioDuration(duration)
    setShowAudioRecorder(false) // Close after adding to post
  }

  const handleMediaChange = (files: File[]) => {
    setMediaFiles(files)
  }

  const handleShowAudioRecorder = () => {
    if (!features.canUploadImages) {
      handlePremiumFeatureClick("gold")
      return
    }
    setShowAudioRecorder(true)
  }

  const handleShowMediaUploader = () => {
    if (!features.canUploadImages) {
      handlePremiumFeatureClick("gold")
      return
    }
    setShowMediaUploader(true)
  }

  const handlePublish = async () => {
    console.log("[CREATE POST] Attempting to publish:", { 
      contentLength: postContent.trim().length,
      mediaFiles: mediaFiles.length,
      audioFile: !!audioFile,
      fileNames: mediaFiles.map(f => f.name)
    })
    
    if (!postContent.trim() && mediaFiles.length === 0 && !audioFile && !poll) {
      console.log("[CREATE POST] Nothing to publish - no content, media, audio, or poll")
      return
    }

    setIsSubmitting(true)

    try {
      const formData = new FormData()
      formData.append('content', postContent.trim())
      formData.append('visibility', postVisibility)
      
      // Get location from user profile or input
      let locationToUse = location.trim()
      if (!locationToUse && user?.location) {
        locationToUse = user.location
      }

      if (locationToUse) {
        formData.append('location', locationToUse)
        if (user?.latitude && user?.longitude) {
          formData.append('latitude', user.latitude.toString())
          formData.append('longitude', user.longitude.toString())
        }
      }

      if (poll) {
        formData.append('poll', JSON.stringify({
          question: poll.question,
          options: poll.options.map(opt => opt.text),
          expires_in_hours: poll.expires_in_hours
        }))
      }

      // Adicionar arquivos de mídia
      mediaFiles.forEach((file, index) => {
        formData.append(`media_${index}`, file)
      })

      // Adicionar arquivo de áudio
      if (audioFile) {
        formData.append('audio', audioFile)
        formData.append('audio_duration', audioDuration.toString())
      }

      // Debug: Log FormData contents
      console.log("[CREATE POST] FormData being sent:")
      for (const [key, value] of formData.entries()) {
        if (value instanceof File) {
          console.log(`  ${key}: File - ${value.name} (${value.type}, ${value.size} bytes)`)
        } else {
          console.log(`  ${key}: ${value}`)
        }
      }
      
      const response = await fetch('/api/v1/posts', {
        method: 'POST',
        body: formData,
      })

      const result = await response.json()

      if (!response.ok) {
        // Handle specific error types
        const errorMsg = result.error === "VERIFICATION_REQUIRED" 
          ? "Você precisa verificar sua conta para fazer upload de imagens. Vá em Configurações > Verificação."
          : result.error === "PLAN_REQUIRED"
          ? "Este recurso requer um plano premium. Atualize seu plano para continuar."
          : result.error === "LIMIT_EXCEEDED"
          ? `Limite excedido: ${result.metadata?.limit_type === "media_per_post" ? `Máximo ${result.metadata.limit} arquivo(s) por post` : result.error}`
          : result.error || 'Erro ao criar post'
        
        throw new Error(errorMsg)
      }

      // Call success callback FIRST to ensure immediate feed update
      if (onSuccess && result.data) {
        console.log("[CREATE POST] Calling onSuccess with new post data:", result.data.id)
        onSuccess(result.data)
      }

      // Reset form after callback to prevent UI glitches
      setPostContent("")
      setPostVisibility("public")
      setMediaFiles([])
      setAudioFile(null)
      setAudioDuration(0)
      setShowAudioRecorder(false)
      setShowMediaUploader(false)
      setShowPollCreator(false)
      setPoll(null)
      setPollQuestion("")
      setPollOptions([
        { id: "1", text: "" },
        { id: "2", text: "" }
      ])
      setPollDuration(24)
      setLocation("")
      setShowLocationInput(false)
      
      console.log("[CREATE POST] Post created successfully:", result.data?.id || 'Unknown')
    } catch (error) {
      console.error("[CREATE POST] Error creating post:", error)
      
      if (error instanceof Error) {
        if (error.message.includes("VERIFICATION_REQUIRED")) {
          // Show verification prompt instead of generic error
          alert("Para fazer upload de mídia, você precisa verificar sua conta. Acesse Configurações > Verificação.")
        } else if (error.message.includes("PLAN_REQUIRED")) {
          // Show premium upgrade prompt
          handlePremiumFeatureClick("gold")
        } else {
          // Show error message
          alert(`Erro ao criar post: ${error.message}`)
        }
      } else {
        alert("Erro ao criar post. Tente novamente.")
      }
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!user) return null

  // Mobile floating button
  if (isMobile) {
    return (
      <>
        {/* Floating Action Button */}
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="fixed bottom-20 right-4 z-50 lg:hidden"
        >
          <Button
            onClick={() => setShowMobileModal(true)}
            className="w-14 h-14 rounded-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transition-all duration-200"
            size="icon"
          >
            <Plus className="w-6 h-6 text-white" />
          </Button>
        </motion.div>

        {/* Mobile Modal */}
        <AnimatePresence>
          {showMobileModal && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 z-50 bg-black/50 lg:hidden"
              onClick={() => setShowMobileModal(false)}
            >
              <motion.div
                initial={{ y: '100%' }}
                animate={{ y: 0 }}
                exit={{ y: '100%' }}
                transition={{ type: 'spring', damping: 30, stiffness: 300 }}
                className="absolute bottom-0 left-0 right-0 bg-white dark:bg-gray-900 rounded-t-3xl p-4 max-h-[90vh] overflow-y-auto"
                onClick={e => e.stopPropagation()}
              >
                {/* Mobile Header */}
                <div className="flex items-center justify-between mb-4 pb-3 border-b border-gray-200 dark:border-white/10">
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Criar Post</h2>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => setShowMobileModal(false)}
                    className="rounded-full"
                  >
                    <X className="w-5 h-5" />
                  </Button>
                </div>

                {/* Mobile Content - Reuse existing form */}
                <div className="flex gap-3 items-start">
                  <UserAvatar 
                    user={user}
                    size="lg" 
                    showPlanBadge={false}
                    className="flex-shrink-0 w-12 h-12 mt-1"
                  />
                  <div className="flex-1 min-w-0 flex flex-col">
                    <Textarea
                      placeholder="O que está acontecendo?"
                      value={postContent}
                      onChange={(e) => setPostContent(e.target.value)}
                      className="w-full bg-transparent border-none text-lg p-0 focus-visible:ring-0 placeholder:text-gray-500 dark:placeholder:text-gray-400 resize-none min-h-[80px] leading-6"
                      rows={4}
                    />
                    
                    {/* Mobile Action bar */}
                    <div className="flex items-center justify-between mt-4 pt-3 border-t border-gray-200 dark:border-white/10">
                      <div className="flex items-center gap-2">
                        {/* Image Upload */}
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={handleShowMediaUploader}
                          disabled={!features.canUploadImages || !features.canUploadMoreMedia}
                          className={cn(
                            "relative rounded-full w-10 h-10 p-0 transition-colors touch-manipulation",
                            features.canUploadImages && features.canUploadMoreMedia
                              ? "text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10"
                              : "text-gray-400 cursor-not-allowed"
                          )}
                        >
                          <Camera className="w-5 h-5" />
                        </Button>

                        {/* Audio Recording */}
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={handleShowAudioRecorder}
                          className="rounded-full w-10 h-10 p-0 text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10 transition-colors touch-manipulation"
                        >
                          <Mic className="w-5 h-5" />
                        </Button>

                        {/* Location */}
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setShowLocationInput(!showLocationInput)}
                          className={cn(
                            "rounded-full w-10 h-10 p-0 transition-colors touch-manipulation",
                            showLocationInput || location
                              ? "text-purple-600 bg-purple-50 dark:bg-purple-500/10"
                              : "text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10"
                          )}
                        >
                          <MapPin className="w-5 h-5" />
                        </Button>
                      </div>
                      
                      {/* Right side - Post button */}
                      <Button
                        onClick={() => {
                          handlePublish()
                          setShowMobileModal(false)
                        }}
                        disabled={(!postContent.trim() && mediaFiles.length === 0 && !audioFile && !poll) || isSubmitting}
                        className="rounded-full bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 font-semibold disabled:opacity-50 disabled:cursor-not-allowed transition-colors min-w-[100px]"
                      >
                        {isSubmitting ? "Postando..." : "Postar"}
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Include all the existing form sections */}
                {showLocationInput && (
                  <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
                    <div className="flex items-center gap-3">
                      <MapPin className="w-5 h-5 text-purple-600 dark:text-purple-400" />
                      <input
                        type="text"
                        value={location}
                        onChange={(e) => setLocation(e.target.value)}
                        placeholder="Adicionar localização..."
                        maxLength={100}
                        className="flex-1 bg-transparent border-none focus:outline-none text-gray-800 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400"
                      />
                      <Button
                        onClick={() => {
                          setLocation("")
                          setShowLocationInput(false)
                        }}
                        variant="ghost"
                        size="sm"
                        className="text-red-600 hover:text-red-700"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                )}

                {/* Media Uploader */}
                {showMediaUploader && (
                  <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
                    <MediaUploader
                      files={mediaFiles}
                      onChange={handleMediaChange}
                      maxFiles={features.maxImagesPerPost === -1 ? 20 : features.maxImagesPerPost}
                      maxSize={50}
                      allowVideo={features.canUploadVideos}
                      allowAudio={features.canUploadImages}
                    />
                    <div className="flex justify-end mt-4">
                      <Button
                        onClick={() => setShowMediaUploader(false)}
                        variant="ghost"
                        size="sm"
                      >
                        Fechar
                      </Button>
                    </div>
                  </div>
                )}

                {/* Audio Recorder */}
                {showAudioRecorder && (
                  <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
                    <AudioRecorder
                      onAudioReady={handleAudioReady}
                      onCancel={() => setShowAudioRecorder(false)}
                      maxDuration={300}
                    />
                  </div>
                )}
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Payment Modal */}
        <PaymentModal
          isOpen={showPaymentModal}
          onClose={() => setShowPaymentModal(false)}
          selectedPlan={selectedPlan}
          onSuccess={() => setShowPaymentModal(false)}
        />
      </>
    )
  }

  const handlePremiumFeatureClick = (requiredPlan: "gold" | "diamond" | "couple" = "gold") => {
    setSelectedPlan(requiredPlan)
    setShowPaymentModal(true)
  }

  const handleAudioReady = (file: File, duration: number) => {
    setAudioFile(file)
    setAudioDuration(duration)
    setShowAudioRecorder(false) // Close after adding to post
  }

  const handleMediaChange = (files: File[]) => {
    setMediaFiles(files)
  }

  const handleShowAudioRecorder = () => {
    if (!features.canUploadImages) {
      handlePremiumFeatureClick("gold")
      return
    }
    setShowAudioRecorder(true)
  }

  const handleShowMediaUploader = () => {
    if (!features.canUploadImages) {
      handlePremiumFeatureClick("gold")
      return
    }
    setShowMediaUploader(true)
  }

  const handlePublish = async () => {
    console.log("[CREATE POST] Attempting to publish:", { 
      contentLength: postContent.trim().length,
      mediaFiles: mediaFiles.length,
      audioFile: !!audioFile,
      fileNames: mediaFiles.map(f => f.name)
    })
    
    if (!postContent.trim() && mediaFiles.length === 0 && !audioFile && !poll) {
      console.log("[CREATE POST] Nothing to publish - no content, media, audio, or poll")
      return
    }

    setIsSubmitting(true)

    try {
      const formData = new FormData()
      formData.append('content', postContent.trim())
      formData.append('visibility', postVisibility)
      
      // Get location from user profile or input
      let locationToUse = location.trim()
      if (!locationToUse && user?.city && user?.uf) {
        locationToUse = `${user.city}, ${user.uf}`
      }
      
      // Add location if available
      if (locationToUse) {
        formData.append('location', locationToUse)
      }
      
      // Add coordinates if available from user profile
      if (user?.latitude && user?.longitude) {
        formData.append('latitude', user.latitude.toString())
        formData.append('longitude', user.longitude.toString())
      }
      
      // Adicionar enquete se existir
      if (poll) {
        formData.append('poll', JSON.stringify({
          question: poll.question,
          options: poll.options.map(opt => opt.text),
          expires_in_hours: poll.expires_in_hours
        }))
      }

      // Adicionar arquivos de mídia
      mediaFiles.forEach((file, index) => {
        formData.append(`media_${index}`, file)
      })

      // Adicionar arquivo de áudio
      if (audioFile) {
        formData.append('audio', audioFile)
        formData.append('audio_duration', audioDuration.toString())
      }

      // Debug: Log FormData contents
      console.log("[CREATE POST] FormData being sent:")
      for (const [key, value] of formData.entries()) {
        if (value instanceof File) {
          console.log(`  ${key}: File - ${value.name} (${value.type}, ${value.size} bytes)`)
        } else {
          console.log(`  ${key}: ${value}`)
        }
      }
      
      const response = await fetch('/api/v1/posts', {
        method: 'POST',
        body: formData,
      })

      const result = await response.json()

      if (!response.ok) {
        // Handle specific error types
        const errorMsg = result.error === "VERIFICATION_REQUIRED" 
          ? "Você precisa verificar sua conta para fazer upload de imagens. Vá em Configurações > Verificação."
          : result.error === "PLAN_REQUIRED"
          ? "Este recurso requer um plano premium. Atualize seu plano para continuar."
          : result.error === "LIMIT_EXCEEDED"
          ? `Limite excedido: ${result.metadata?.limit_type === "media_per_post" ? `Máximo ${result.metadata.limit} arquivo(s) por post` : result.error}`
          : result.error || 'Erro ao criar post'
        
        throw new Error(errorMsg)
      }

      // Call success callback FIRST to ensure immediate feed update
      if (onSuccess && result.data) {
        console.log("[CREATE POST] Calling onSuccess with new post data:", result.data.id)
        onSuccess(result.data)
      }

      // Reset form after callback to prevent UI glitches
      setPostContent("")
      setPostVisibility("public")
      setMediaFiles([])
      setAudioFile(null)
      setAudioDuration(0)
      setShowAudioRecorder(false)
      setShowMediaUploader(false)
      setShowPollCreator(false)
      setPoll(null)
      setPollQuestion("")
      setPollOptions([{ id: "1", text: "" }, { id: "2", text: "" }])
      setPollDuration(24)
      setLocation("")
      setShowLocationInput(false)

      console.log("[CREATE POST] Form reset completed - all media cleared")
    } catch (error) {
      console.error("Error creating post:", error)
      alert(error instanceof Error ? error.message : 'Erro ao criar post')
    } finally {
      setIsSubmitting(false)
    }
  }

  const getVisibilityIcon = () => {
    switch (postVisibility) {
      case "public":
        return <Globe className="w-3 h-3" />
      case "friends":
        return <Users className="w-3 h-3" />
      case "private":
        return <Lock className="w-3 h-3" />
    }
  }

  const getVisibilityLabel = () => {
    switch (postVisibility) {
      case "public":
        return "Público"
      case "friends":
        return "Amigos"
      case "private":
        return "Privado"
    }
  }

  return (
    <div
      data-create-post
      className="w-full max-w-2xl mx-auto mb-6 bg-white/80 dark:bg-white/5 backdrop-blur-sm border border-gray-200 dark:border-white/10 rounded-2xl p-4 shadow-sm hover:shadow-md transition-all duration-200"
    >
      <div className="flex gap-3 items-start">
        <UserAvatar 
          user={user}
          size="lg" 
          showPlanBadge={false}
          className="flex-shrink-0 w-12 h-12 mt-1"
        />
        <div className="flex-1 min-w-0 flex flex-col">
          <Textarea
            placeholder="O que está acontecendo?"
            value={postContent}
            onChange={(e) => setPostContent(e.target.value)}
            className="w-full bg-transparent border-none text-lg p-0 focus-visible:ring-0 placeholder:text-gray-500 dark:placeholder:text-gray-400 resize-none min-h-[60px] leading-6"
            rows={3}
          />
          
          {/* Action bar - Alinhado com o texto */}
          <div className="flex items-center justify-between mt-4 pt-3 border-t border-gray-200 dark:border-white/10">
            <div className="flex items-center gap-1">
              {/* Image Upload */}
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={handleShowMediaUploader}
                      disabled={!features.canUploadImages || !features.canUploadMoreMedia}
                      className={cn(
                        "relative rounded-full w-9 h-9 p-0 transition-colors",
                        features.canUploadImages && features.canUploadMoreMedia
                          ? "text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10"
                          : "text-gray-400 cursor-not-allowed"
                      )}
                    >
                      <Camera className="w-5 h-5" />
                      {features.userPlan === "free" && features.maxImagesPerPost === 1 && (
                        <span className="absolute -top-1 -right-1 text-xs font-bold text-orange-500">1</span>
                      )}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="top">
                    {!features.canUploadImages ? (
                      <p>Upload de imagens • Requer verificação</p>
                    ) : !features.canUploadMoreMedia ? (
                      <p>Limite de armazenamento atingido</p>
                    ) : (
                      <p>Adicionar fotos ou vídeos</p>
                    )}
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {/* Audio Recording */}
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={handleShowAudioRecorder}
                      className="rounded-full w-9 h-9 p-0 text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10 transition-colors"
                    >
                      <Mic className="w-5 h-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="top">
                    <p>Gravar áudio</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {/* Poll */}
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => !features.canCreatePolls ? handlePremiumFeatureClick("gold") : setShowPollCreator(true)}
                      className={cn(
                        "relative rounded-full w-9 h-9 p-0 transition-colors",
                        features.canCreatePolls
                          ? "text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10"
                          : "text-gray-400 cursor-not-allowed"
                      )}
                    >
                      <BarChart2 className="w-5 h-5" />
                      {!features.canCreatePolls && (
                        <Crown className="absolute -top-1 -right-1 w-3 h-3 text-yellow-500" />
                      )}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="top">
                    <p>Enquete{!features.canCreatePolls ? " • Gold" : ""}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {/* Location */}
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setShowLocationInput(!showLocationInput)}
                      className={cn(
                        "rounded-full w-9 h-9 p-0 transition-colors",
                        showLocationInput || location
                          ? "text-purple-600 bg-purple-50 dark:bg-purple-500/10"
                          : "text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10"
                      )}
                    >
                      <MapPin className="w-5 h-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="top">
                    <p>Localização</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

            </div>
            
            {/* Right side - Visibility and Post button */}
            <div className="flex items-center gap-3">
              {/* Character count - Twitter style */}
              <div className="flex items-center gap-2">
                {postContent.length > 0 && (
                  <div className={cn(
                    "w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium",
                    postContent.length > 280 
                      ? "bg-red-100 text-red-600 dark:bg-red-900/20 dark:text-red-400"
                      : postContent.length > 260
                      ? "bg-yellow-100 text-yellow-600 dark:bg-yellow-900/20 dark:text-yellow-400"
                      : "bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400"
                  )}>
                    {280 - postContent.length}
                  </div>
                )}
                
                {/* Visibility selector - minimal */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="rounded-full w-9 h-9 p-0 text-purple-600 hover:bg-purple-50 dark:hover:bg-purple-500/10 transition-colors"
                    >
                      {getVisibilityIcon()}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-40">
                    <DropdownMenuItem onClick={() => setPostVisibility("public")} className="flex items-center gap-2">
                      <Globe className="w-4 h-4" />
                      Público
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setPostVisibility("friends")} className="flex items-center gap-2">
                      <Users className="w-4 h-4" />
                      Seguidores
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => setPostVisibility("private")} className="flex items-center gap-2">
                      <Lock className="w-4 h-4" />
                      Apenas eu
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
              
              {/* Post button - Twitter style */}
              <Button
                onClick={handlePublish}
                disabled={(!postContent.trim() && mediaFiles.length === 0 && !audioFile && !poll) || isSubmitting}
                className="rounded-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-1.5 font-semibold disabled:opacity-50 disabled:cursor-not-allowed transition-colors min-w-[80px]"
              >
                {isSubmitting ? "Postando..." : "Postar"}
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Location Input */}
      {showLocationInput && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <div className="flex items-center gap-3">
            <MapPin className="w-5 h-5 text-purple-600 dark:text-purple-400" />
            <input
              type="text"
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              placeholder="Adicionar localização..."
              maxLength={100}
              className="flex-1 bg-transparent border-none focus:outline-none text-gray-800 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400"
            />
            <Button
              onClick={() => {
                setLocation("")
                setShowLocationInput(false)
              }}
              variant="ghost"
              size="sm"
              className="text-red-600 hover:text-red-700"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400 mt-2">
            {location.length}/100
          </div>
        </div>
      )}

      {/* Media Uploader */}
      {showMediaUploader && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <MediaUploader
            files={mediaFiles}
            onChange={handleMediaChange}
            maxFiles={features.maxImagesPerPost === -1 ? 20 : features.maxImagesPerPost}
            maxSize={50} // 50MB max per file
            allowVideo={features.canUploadVideos}
            allowAudio={features.canUploadImages}
          />
          {features.storageLimit > 0 && (
            <div className="mt-2 text-xs text-gray-500 dark:text-gray-400">
              Armazenamento usado: {features.formatStorageLimit(features.storageUsed)} de {features.formatStorageLimit(features.storageLimit)}
            </div>
          )}
          <div className="flex justify-end mt-4">
            <Button
              onClick={() => {
                console.log("[CREATE POST] Media uploader cancelled - files cleared")
                setShowMediaUploader(false)
                setMediaFiles([])
              }}
              variant="ghost"
              size="sm"
            >
              Cancelar
            </Button>
          </div>
        </div>
      )}

      {/* Media Preview - Always visible when files are selected */}
      {mediaFiles.length > 0 && !showMediaUploader && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center">
                <Camera className="w-5 h-5 text-purple-600 dark:text-purple-400" />
              </div>
              <div>
                <p className="text-sm font-medium">{mediaFiles.length === 1 ? 'Mídia adicionada' : 'Mídias adicionadas'}</p>
                <p className="text-xs text-gray-500">{mediaFiles.length} arquivo{mediaFiles.length !== 1 ? 's' : ''}</p>
              </div>
            </div>
            <div className="flex gap-2">
              <Button
                onClick={() => {
                  console.log("[CREATE POST] Media preview edit clicked - reopening uploader")
                  setShowMediaUploader(true)
                }}
                variant="ghost"
                size="sm"
                className="text-purple-600 hover:text-purple-700"
              >
                Editar
              </Button>
              <Button
                onClick={() => {
                  console.log("[CREATE POST] Media preview removed - files cleared")
                  setMediaFiles([])
                }}
                variant="ghost"
                size="sm"
                className="text-red-600 hover:text-red-700"
              >
                Remover
              </Button>
            </div>
          </div>
          <div className="grid grid-cols-4 gap-2">
            {mediaFiles.slice(0, 4).map((file, index) => {
              const isVideo = file.type.startsWith('video/')
              const isAudio = file.type.startsWith('audio/')
              const preview = file.type.startsWith('image/') ? URL.createObjectURL(file) : null
              
              return (
                <div key={`${file.name}-${index}`} className="aspect-square bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden relative">
                  {preview ? (
                    <img src={preview} alt={file.name} className="w-full h-full object-cover" />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      {isVideo ? (
                        <Video className="w-6 h-6 text-gray-400" />
                      ) : isAudio ? (
                        <Mic className="w-6 h-6 text-gray-400" />
                      ) : (
                        <Camera className="w-6 h-6 text-gray-400" />
                      )}
                    </div>
                  )}
                  {mediaFiles.length > 4 && index === 3 && (
                    <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                      <span className="text-white text-sm font-medium">+{mediaFiles.length - 4}</span>
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>
      )}

      {/* Audio Recorder */}
      {showAudioRecorder && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <AudioRecorder
            onAudioReady={handleAudioReady}
            onCancel={() => setShowAudioRecorder(false)}
            maxDuration={300} // 5 minutos
          />
        </div>
      )}

      {/* Audio File Preview */}
      {audioFile && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center">
                <Mic className="w-5 h-5 text-green-600 dark:text-green-400" />
              </div>
              <div>
                <p className="text-sm font-medium">Áudio gravado</p>
                <p className="text-xs text-gray-500">{Math.floor(audioDuration / 60)}:{(audioDuration % 60).toString().padStart(2, '0')}</p>
              </div>
            </div>
            <Button
              onClick={() => {
                setAudioFile(null)
                setAudioDuration(0)
              }}
              variant="ghost"
              size="sm"
              className="text-red-600 hover:text-red-700"
            >
              Remover
            </Button>
          </div>
        </div>
      )}

      {/* Poll Creator */}
      {showPollCreator && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Pergunta da enquete</label>
              <input
                type="text"
                value={pollQuestion}
                onChange={(e) => setPollQuestion(e.target.value)}
                placeholder="O que você quer perguntar?"
                maxLength={200}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 focus:outline-none focus:border-purple-500"
              />
              <span className="text-xs text-gray-500 mt-1">{pollQuestion.length}/200</span>
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">Opções de resposta</label>
              <div className="space-y-2">
                {pollOptions.map((option, index) => (
                  <div key={option.id} className="flex items-center gap-2">
                    <input
                      type="text"
                      value={option.text}
                      onChange={(e) => {
                        const newOptions = [...pollOptions]
                        newOptions[index].text = e.target.value
                        setPollOptions(newOptions)
                      }}
                      placeholder={`Opção ${index + 1}`}
                      maxLength={100}
                      className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 focus:outline-none focus:border-purple-500"
                    />
                    {pollOptions.length > 2 && (
                      <Button
                        onClick={() => {
                          setPollOptions(pollOptions.filter((_, i) => i !== index))
                        }}
                        variant="ghost"
                        size="sm"
                        className="text-red-600 hover:text-red-700"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    )}
                  </div>
                ))}
              </div>
              {pollOptions.length < 4 && (
                <Button
                  onClick={() => {
                    setPollOptions([...pollOptions, { id: Date.now().toString(), text: "" }])
                  }}
                  variant="ghost"
                  size="sm"
                  className="mt-2 text-purple-600 hover:text-purple-700"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  Adicionar opção
                </Button>
              )}
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">Duração da enquete</label>
              <select
                value={pollDuration}
                onChange={(e) => setPollDuration(parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 focus:outline-none focus:border-purple-500"
              >
                <option value={1}>1 hora</option>
                <option value={6}>6 horas</option>
                <option value={12}>12 horas</option>
                <option value={24}>1 dia</option>
                <option value={48}>2 dias</option>
                <option value={72}>3 dias</option>
                <option value={168}>7 dias</option>
              </select>
            </div>

            <div className="flex justify-end gap-2">
              <Button
                onClick={() => {
                  setShowPollCreator(false)
                  setPollQuestion("")
                  setPollOptions([{ id: "1", text: "" }, { id: "2", text: "" }])
                  setPollDuration(24)
                }}
                variant="ghost"
                size="sm"
              >
                Cancelar
              </Button>
              <Button
                onClick={() => {
                  if (pollQuestion.trim() && pollOptions.filter(opt => opt.text.trim()).length >= 2) {
                    setPoll({
                      question: pollQuestion.trim(),
                      options: pollOptions.filter(opt => opt.text.trim()),
                      expires_in_hours: pollDuration
                    })
                    setShowPollCreator(false)
                    console.log("[CREATE POST] Poll added to post - creator closed")
                  }
                }}
                size="sm"
                className="bg-purple-600 hover:bg-purple-700 text-white"
                disabled={!pollQuestion.trim() || pollOptions.filter(opt => opt.text.trim()).length < 2}
              >
                Adicionar enquete
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Poll Preview */}
      {poll && !showPollCreator && (
        <div className="mt-4 p-4 border border-gray-200 dark:border-white/10 rounded-xl bg-gray-50 dark:bg-gray-800/50">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center">
                <BarChart2 className="w-5 h-5 text-orange-600 dark:text-orange-400" />
              </div>
              <div>
                <p className="text-sm font-medium">Enquete adicionada</p>
                <p className="text-xs text-gray-500">{poll.options.length} opções • {poll.expires_in_hours}h de duração</p>
              </div>
            </div>
            <Button
              onClick={() => {
                setPoll(null)
                setPollQuestion("")
                setPollOptions([{ id: "1", text: "" }, { id: "2", text: "" }])
                setPollDuration(24)
              }}
              variant="ghost"
              size="sm"
              className="text-red-600 hover:text-red-700"
            >
              Remover
            </Button>
          </div>
          <div className="space-y-2">
            <p className="font-medium text-sm">{poll.question}</p>
            <div className="space-y-1">
              {poll.options.map((option, index) => (
                <div key={option.id} className="text-sm text-gray-600 dark:text-gray-400">
                  • {option.text}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Payment Modal */}
      <PaymentModal
        isOpen={showPaymentModal}
        onClose={() => setShowPaymentModal(false)}
        selectedPlan={selectedPlan}
        onSuccess={() => setShowPaymentModal(false)}
      />
    </div>
  )
}
