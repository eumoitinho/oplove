-- Create pix_payments table for tracking PIX payments (including test payments)
CREATE TABLE IF NOT EXISTS pix_payments (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  
  -- External references
  external_id TEXT NOT NULL UNIQUE, -- Our internal tracking ID
  abacatepay_id TEXT UNIQUE, -- AbacatePay payment ID
  
  -- Payment details
  amount DECIMAL(10,2) NOT NULL,
  currency TEXT NOT NULL DEFAULT 'BRL',
  description TEXT NOT NULL,
  
  -- Customer details
  customer_email TEXT NOT NULL,
  customer_name TEXT NOT NULL,
  customer_document TEXT, -- CPF (optional)
  
  -- Plan information (for subscription tracking)
  plan_type TEXT CHECK (plan_type IN ('gold', 'diamond', 'couple')),
  billing_cycle TEXT CHECK (billing_cycle IN ('monthly', 'yearly')),
  
  -- PIX specific data
  pix_code TEXT, -- PIX copy-paste code
  qr_code TEXT, -- QR code data
  qr_code_image TEXT, -- QR code image URL
  
  -- Status and tracking
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'paid', 'expired', 'canceled')),
  
  -- Test vs production
  is_test BOOLEAN NOT NULL DEFAULT false,
  
  -- Timestamps
  expires_at TIMESTAMP WITH TIME ZONE,
  paid_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX idx_pix_payments_external_id ON pix_payments(external_id);
CREATE INDEX idx_pix_payments_abacatepay_id ON pix_payments(abacatepay_id);
CREATE INDEX idx_pix_payments_status ON pix_payments(status);
CREATE INDEX idx_pix_payments_customer_email ON pix_payments(customer_email);
CREATE INDEX idx_pix_payments_created_at ON pix_payments(created_at);
CREATE INDEX idx_pix_payments_is_test ON pix_payments(is_test);

-- Create a compound index for finding active payments
CREATE INDEX idx_pix_payments_active ON pix_payments(status, expires_at) 
WHERE status IN ('pending');

-- Add RLS (Row Level Security)
ALTER TABLE pix_payments ENABLE ROW LEVEL SECURITY;

-- Policy: Users can only view their own payments (by email)
-- Note: For admin/system access, you may need additional policies
CREATE POLICY "Users can view own payments" ON pix_payments
  FOR SELECT USING (
    auth.jwt() ->> 'email' = customer_email
    OR auth.jwt() ->> 'role' = 'admin'
  );

-- Policy: Only system/service can insert payments
CREATE POLICY "Service can insert payments" ON pix_payments
  FOR INSERT WITH CHECK (
    auth.jwt() ->> 'role' = 'service_role'
    OR auth.role() = 'service_role'
  );

-- Policy: Only system/service can update payments (for webhook processing)
CREATE POLICY "Service can update payments" ON pix_payments
  FOR UPDATE USING (
    auth.jwt() ->> 'role' = 'service_role'
    OR auth.role() = 'service_role'
  );

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_pix_payments_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_pix_payments_updated_at
  BEFORE UPDATE ON pix_payments
  FOR EACH ROW
  EXECUTE FUNCTION update_pix_payments_updated_at();

-- Add comments for documentation
COMMENT ON TABLE pix_payments IS 'PIX payment tracking table for OpenLove subscriptions and one-time payments';
COMMENT ON COLUMN pix_payments.external_id IS 'Internal tracking ID generated by our system';
COMMENT ON COLUMN pix_payments.abacatepay_id IS 'Payment ID from AbacatePay service';
COMMENT ON COLUMN pix_payments.is_test IS 'Flag to identify test payments (development/testing)';
COMMENT ON COLUMN pix_payments.plan_type IS 'Subscription plan type (null for one-time payments)';
COMMENT ON COLUMN pix_payments.pix_code IS 'PIX copy-paste string for payment';
COMMENT ON COLUMN pix_payments.qr_code_image IS 'Base64 or URL of QR code image';